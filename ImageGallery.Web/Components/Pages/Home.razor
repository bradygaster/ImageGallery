@page "/"
@rendermode InteractiveServer
@using Azure.Storage.Blobs
@inject BlobServiceClient blobServiceClient

<div class="row">
    <InputFile OnChange="HandleFileSelected" accept=".jpg,.jpeg,.png,.gif" />
</div>

<div class="row">
@foreach (var blobName in blobNames)
{
    <div class="col-md-1" style="margin-bottom: 10px;">
        <img src="@blobName" class="img-thumbnail" />
    </div>
}
</div>

@code {
    private List<string> blobNames = new();
    private BlobContainerClient? blobContainerClient;
    private BlobContainerClient? thumbsContainerClient;

    private async Task InitializeBlobContainerClient()
    {
        blobContainerClient = blobServiceClient.GetBlobContainerClient("images");
        thumbsContainerClient = blobServiceClient.GetBlobContainerClient("thumbnails");
        await blobContainerClient.CreateIfNotExistsAsync(publicAccessType: Azure.Storage.Blobs.Models.PublicAccessType.Blob);
        await thumbsContainerClient.CreateIfNotExistsAsync(publicAccessType: Azure.Storage.Blobs.Models.PublicAccessType.Blob);
    }

    protected override async Task OnInitializedAsync()
    {
        await InitializeBlobContainerClient();
        await LoadBlobs();
    }

    private async Task LoadBlobs()
    {
        blobNames.Clear();
        await foreach (var blobItem in thumbsContainerClient!.GetBlobsAsync())
        {
            var blobClient = thumbsContainerClient.GetBlobClient(blobItem.Name);
            blobNames.Add(blobClient.Uri.AbsoluteUri);
        }
        StateHasChanged();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            if (!file.ContentType.StartsWith("image/"))
            {
                Console.WriteLine($"File {file.Name} is not a valid image.");
                continue;
            }

            var blobClient = blobContainerClient!.GetBlobClient(file.Name);
            using var stream = file.OpenReadStream();
            await blobClient.UploadAsync(stream, overwrite: true);
        }

        await LoadBlobs();
    }
}
